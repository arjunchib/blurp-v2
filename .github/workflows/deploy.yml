name: Build & Deploy
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            packages/**/tsconfig.tsbuilinfo
            packages/**/lib
          key: ${{ runner.os }}-build
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build

  # Disable until deno deploy works with npm specifiers
  # deploy-deno:
  #   name: Deploy / Deno
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: examples/deno
  #   env:
  #     GUILD_ID: ${{ secrets.GUILD_ID }}
  #     APPLICATION_ID: ${{ secrets.DENO_DEPLOY_APPLICATION_ID }}
  #     TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: denoland/setup-deno@v1
  #       with:
  #         deno-version: vx.x.x
  #     - run: deno run -A upload.ts
  deploy-cloudflare:
    name: Deploy / Cloudflare
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: examples/cloudflare
    env:
      GUILD_ID: ${{ secrets.GUILD_ID }}
      APPLICATION_ID: ${{ secrets.CLOUDFLARE_APPLICATION_ID }}
      TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache/restore@v3
        with:
          path: |
            packages/**/tsconfig.tsbuilinfo
            packages/**/lib
          key: ${{ runner.os }}-build
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - run: pnpm install --frozen-lockfile
      - run: pnpm run update
      - uses: cloudflare/wrangler-action@2.0.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: examples/cloudflare
